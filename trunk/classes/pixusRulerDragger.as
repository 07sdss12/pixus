// pixusRulerDragger class// The title bar of Pixus//// (cc)2007-2009 JPEG Interactive// By Jam Zhang// jammind@gmail.compackage {	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.SimpleButton;	import flash.display.NativeWindow;	import flash.display.NativeWindowInitOptions;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFieldType;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.FocusEvent;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	public class pixusRulerDragger extends Sprite {		var shell:pixusShell;		var _pixus:pixus;		var main:pixusMain;		public function pixusRulerDragger():void {			addEventListener(Event.ADDED_TO_STAGE, init);		}		function init(e:Event){			main=parent as pixusMain;			_pixus=parent.parent as pixus;			shell=main.shell;						hotspot.useHandCursor=false;			hotspot.addEventListener(MouseEvent.MOUSE_DOWN, handleDrag);						tfSize.autoSize=TextFieldAutoSize.LEFT;			tfSize.maxChars=15;			tfSize.doubleClickEnabled=true;			tfSize.addEventListener(MouseEvent.MOUSE_DOWN, handleDrag);			tfSize.addEventListener(MouseEvent.DOUBLE_CLICK,handleDoubleClick);		}						// Manual Size Input				function handleDoubleClick(e:MouseEvent):void {			if(shell.freeDragging)				return;			tfSize.type=TextFieldType.INPUT;			tfSize.selectable=true;			tfSize.setSelection(0,tfSize.length);			tfSize.removeEventListener(MouseEvent.MOUSE_DOWN, handleDrag);			tfSize.removeEventListener(MouseEvent.DOUBLE_CLICK,handleDoubleClick);			tfSize.addEventListener(FocusEvent.FOCUS_OUT, handleFocusOut);			tfSize.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);		}				function handleFocusOut(e:FocusEvent):void {			submit();		}				function handleKeyDown(e:KeyboardEvent):void {			e.stopPropagation();			switch (e.keyCode) {				case Keyboard.ENTER:					submit();					break;				case Keyboard.ESCAPE:					defocus();					cancel();					break;			}		}				function cancel():void {			main.showSize(main.rulerWidth,main.rulerHeight);		}				function submit():void {			defocus();			// Split string by any number of non-numberic characters			var p:Array=tfSize.text.split(new RegExp('\\D+'));			if (p.length!=2) {				// Illegal input				cancel();			} else {				_pixus.resizeTo(p[0],p[1]);			}		}				function defocus():void {			tfSize.type=TextFieldType.DYNAMIC;			tfSize.selectable=false;			tfSize.setSelection(0,0);			tfSize.addEventListener(MouseEvent.MOUSE_DOWN, handleDrag);			tfSize.addEventListener(MouseEvent.DOUBLE_CLICK,handleDoubleClick);			tfSize.removeEventListener(FocusEvent.FOCUS_OUT, handleFocusOut);			tfSize.removeEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);		}						// Drag				public function handleDrag(event:MouseEvent):void {			if(shell.freeDragging)				return;			switch(event.type){				case MouseEvent.MOUSE_DOWN:					(parent.parent as pixus).startMove();					break;			}		}	}}