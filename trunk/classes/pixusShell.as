// pixusShell class// The Application Root Class// 2009-8-20// (cc)2007-2009 JPEG Interactive// By Jam Zhang// jammind@gmail.compackage {	import flash.display.NativeWindow;	import flash.display.NativeWindowType;	import flash.display.NativeWindowInitOptions;	import flash.display.NativeWindowSystemChrome;	import flash.display.NativeMenu;	import flash.display.NativeMenuItem;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.SimpleButton;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.desktop.DockIcon;	import flash.desktop.SystemTrayIcon;	import flash.desktop.NativeApplication;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.SharedObject;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.events.InvokeEvent;	import flash.events.MouseEvent;	import flash.events.ScreenMouseEvent;	import flash.geom.Point;	import flash.utils.ByteArray;	import flash.system.Capabilities;	import com.google.analytics.GATracker;	import caurina.transitions.Tweener;	import codeplay.event.customEvent;	import codeplay.utils.copyObjectDeep;	public class pixusShell extends Sprite {		public static const APP_NAME:String='Pixus';		public static const APP_PATH:String='/';		public static const UI_TWEENING_TIME:Number=.3;		public static const ROW_WIDTH:int=300;		public static const PRESET_ROW_HEIGHT:int=25;		public static const SKIN_ROW_HEIGHT:int=50;		public static const PIXUS_PANEL_X:int=400;		public static const PIXUS_PANEL_Y:int=200;		public static const UPDATE_PANEL_X:int=50;		public static const UPDATE_PANEL_Y:int=50;		public static const PREFERENCES_PANEL_WIDTH:int=300;		public static const PREFERENCES_PANEL_X:int=50;		public static const PREFERENCES_PANEL_Y:int=320;		// Custom Events		public static const EVENT_TAB_ACTIVATED:String='PixusEventTabActivated'; // Preferences Tab Icon Clicked		public static const EVENT_SYNC_WINDOW_SIZE:String='PixusEventSyncWindowSize';		public static const EVENT_SYNC_MENU:String='PixusEventSyncMenu';// Sync System Tray / Dock Icon Menu To The Presets		public static const EVENT_SYNC_PRESETS:String='PixusEventSyncPresets';// Sync Preferences / Presets		public static const EVENT_APPLY_SKIN:String='PixusEventApplySkin';// Apply Skin		public static const EVENT_FIND_BACK:String='PixusEventFindPixusBack';// Apply Skin		public static const EVENT_RESET_PRESETS:String='PixusEventResetPresets';// Reset Preferences / Presets		public static const EVENT_PRESETS_CHANGE:String='PixusEventPresetsChange';// Presets Data Changed		public static const EVENT_CHECK_UPDATE:String='PixusEventCheckUpdate';// Check For Update		public static const EVENT_START_FREE_DRAG:String='PixusEventStartFreeDrag';// Start Multi-screen Drag		public static const SHOW_PREFERENCES:String='PixusEventShowPreferences';// Show Preferences Window		public static const HIDE_PREFERENCES:String='PixusEventHidePreferences';// Hide Preferences Window		public static const SHOW_PIXUS:String='PixusEventShowPixus';// Show Pixus Window		public static const HIDE_PIXUS:String='PixusEventHidePixus';// Hide Pixus Window		public static const TOGGLE_PIXUS:String='PixusEventTogglePixus';// Toggle Pixus Window		public static const EVENT_TOGGLE_GUIDES:String='PixusEventToggleGuides';// Toggle Quick Guides		// Defult Presets		public static const PRESETS:Array=[		{width:480,height:272,comments:'PSP'},		{width:480,height:320,comments:'iPhone Landscape'},		{width:320,height:480,comments:'iPhone Portrait'},		{width:640,height:480,comments:'VGA'},		{width:760,height:420,comments:'SVGA Windowed'},		{width:800,height:600,comments:'SVGA'},		{width:955,height:600,comments:'XGA Windowed'},		{width:1024,height:768,comments:'XGA'}		];		var mcPixus:pixus;		var windowPixus:hidingWindow;		var windowPreferences:hidingWindow;		var windowUpdate:hidingWindow;		static var firstTimeInvoke:Boolean=true;		static var so:SharedObject=SharedObject.getLocal(APP_NAME,APP_PATH);		public static var skinpresets, settings:XML;		public static var options:Object=so.data;		public static var isMacOS:Boolean=(Capabilities.os.indexOf('Mac')!=-1);		// Creating a Google Analytics tracker		public static var tracker:GATracker;		var loader:URLLoader=new URLLoader();		// Must initialize SharedObject first for Max OS X compatibility. Never use SharedObject.getLocal(APP_NAME,APP_PATH).data directly.		function pixusShell():void {			// Default settings			if (options.presets==undefined) {				options.presets=PRESETS;			}			if (options.alwaysInFront==undefined) {				options.alwaysInFront=true;			}			if (options.showQuickGuides==undefined) {				options.showQuickGuides=true;			}			if (options.QuickQuides==undefined) {				options.QuickQuides=[{type:'H',offsetY:20},{type:'V',offsetX:20}];			}			addEventListener(Event.ADDED_TO_STAGE,init);		}		function init(e:Event):void{			// Creating a Google Analytics tracker object and track the launch			tracker = new GATracker( this, 'UA-1806074-16', 'AS3', false );			loader.addEventListener(Event.COMPLETE,parseXML);			loader.addEventListener(IOErrorEvent.IO_ERROR,errorXML);			loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR,errorXML);			loader.load(new URLRequest('pixus-settings.xml'));		}		function errorXML(e:Event):void{			switch(e.type){				case IOErrorEvent.IO_ERROR:					tracker.trackPageview( 'Launch/Failed/IO_ERROR');					tracker.trackEvent('Launch', 'Failure', 'IO_ERROR', 0);					break;				case SecurityErrorEvent.SECURITY_ERROR:					tracker.trackPageview( 'Launch/Failed/SECURITY_ERROR');					tracker.trackEvent('Launch', 'Failure', 'SECURITY_ERROR', 0);					break;			}		}		function parseXML(e:Event):void {			settings=new XML(e.target.data);			skinpresets=settings.skinpresets;			if (options.skin==undefined) {				options.skin=0;			}			options.updateFeedURL=settings.updatefeedurl;			options.version=settings.version;			tracker.trackPageview( 'Launch/R'+options.version.release);			tracker.trackEvent('Launch', 'Successfully', 'Release', options.version.release);			// Create Pixus Window			var option:NativeWindowInitOptions;			option=new NativeWindowInitOptions();			option.type=NativeWindowType.UTILITY ;			option.systemChrome=NativeWindowSystemChrome.NONE;			option.transparent=true;			windowPixus=new hidingWindow(option);			windowPixus.title = 'Pixus';			mcPixus=new pixus(this);			windowPixus.stage.addChild(mcPixus);			//Create Preferences Window			option=new NativeWindowInitOptions();			option.type=NativeWindowType.UTILITY;			option.systemChrome=NativeWindowSystemChrome.NONE;			option.transparent=true;			windowPreferences=new hidingWindow(option);			if (options.preferencesWindow==undefined) {				options.preferencesWindow={x:100,y:300,height:600};			}			if (options.preferencesWindow!=undefined) {				windowPreferences.x=options.preferencesWindow.x;				windowPreferences.y=options.preferencesWindow.y;			}			windowPreferences.title = 'Pixus Preferences';			windowPreferences.width = PREFERENCES_PANEL_WIDTH+100;			windowPreferences.stage.scaleMode=StageScaleMode.NO_SCALE;			windowPreferences.stage.align=StageAlign.TOP_LEFT;			var p:preferences=new preferences(this);			p.x=10;			p.y=10;			windowPreferences.stage.addChild(p);			//Create Update Window			option=new NativeWindowInitOptions();			option.type=NativeWindowType.UTILITY ;			option.systemChrome=NativeWindowSystemChrome.NONE;			option.transparent=true;			windowUpdate=new hidingWindow(option);			windowUpdate.width=350;			windowUpdate.height=300;			if (options.updateWindowPosition==undefined) {				options.updateWindowPosition={x:100,y:100};			}			windowUpdate.visible=false;			var u:update=new update();			u.x=10;			u.y=10;			u.scaleX=u.scaleY=1;			windowUpdate.stage.addChild(u);			// Set Always In Front State			alwaysInFront=pixusShell.options.alwaysInFront;			// Dock and SystemTray Icon			syncMenu();			NativeApplication.nativeApplication.icon.addEventListener(MouseEvent.CLICK,handleIcon);// For Windows Tray Icon			NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE,handleInvoke);// For Mac OS Dock Icon Click or Reinvoke in Windows			NativeApplication.nativeApplication.icon.bitmaps  = [			new BitmapIconPixus512(512,512),			new BitmapIconPixus128(128,128),			new BitmapIconPixus48(48,48),			new BitmapIconPixus32(32,32),			new BitmapIconPixus16(16,16)			];			// Windows System Tray			if (NativeApplication.supportsSystemTrayIcon) {				var sysTrayIcon:SystemTrayIcon=NativeApplication.nativeApplication.icon as SystemTrayIcon;				sysTrayIcon.tooltip = APP_NAME;			}			// Max OSX Dock Bar			//if (NativeApplication.supportsDockIcon) {			//var dockIcon:DockIcon=NativeApplication.nativeApplication.icon as DockIcon;			//}			NativeApplication.nativeApplication.addEventListener(EVENT_SYNC_MENU, handleSyncMenu);			NativeApplication.nativeApplication.addEventListener(SHOW_PREFERENCES, handleWindows);			NativeApplication.nativeApplication.addEventListener(HIDE_PREFERENCES, handleWindows);			NativeApplication.nativeApplication.addEventListener(SHOW_PIXUS, handleWindows);			NativeApplication.nativeApplication.addEventListener(HIDE_PIXUS, handleWindows);			NativeApplication.nativeApplication.addEventListener(TOGGLE_PIXUS, handleWindows);			NativeApplication.nativeApplication.addEventListener(EVENT_FIND_BACK,handleFindBackEvent);			NativeApplication.nativeApplication.addEventListener(EVENT_RESET_PRESETS,doResetPresets);		}		public function set alwaysInFront(t:Boolean){			options.alwaysInFront=windowPixus.alwaysInFront=windowPreferences.alwaysInFront=windowUpdate.alwaysInFront=t;		}		public function get freeDragging():Boolean{			return mcPixus.main.freeDragging;		}		public function stopFreeDrag():void{			mcPixus.main.stopFreeDrag();		}		function handleWindows(event:Event):void {			switch(event.type){				case SHOW_PREFERENCES:					togglePreferencesWindow(true);					break;				case HIDE_PREFERENCES:					togglePreferencesWindow(false);					break;				case SHOW_PREFERENCES:					togglePreferencesWindow(true);					break;				case SHOW_PIXUS:					togglePixusWindow(true);					break;				case HIDE_PIXUS:					togglePixusWindow(false);					break;				case TOGGLE_PIXUS:					togglePixusWindow();					break;			}		}		function syncMenu():void {			var iconMenu:NativeMenu = new NativeMenu();			var item:NativeMenuItem;						// Adding Presets			for (var n=0; n<options.presets.length; n++) {				var preset=options.presets[n];				item=new NativeMenuItem(preset.width+' x '+preset.height+' '+preset.comments);				item.data=preset;				item.addEventListener(Event.SELECT,handlePresets);				iconMenu.addItem(item);			}						// Adding Separator			iconMenu.addItem(new NativeMenuItem('',true));						// Adding Skins			for (n=0; n<skinpresets.skin.length(); n++) {				var skin:XML=skinpresets.skin[n];				skin.@id=n;				//trace(skin);				item=new NativeMenuItem(skin.@title+' ('+skin.@subtitle+')');				item.data=skin;				item.addEventListener(Event.SELECT,handleSkins);				iconMenu.addItem(item);			}						// Adding Separator			iconMenu.addItem(new NativeMenuItem('',true));						item=new NativeMenuItem('Find Panels');			item.addEventListener(Event.SELECT,handleFindBack);			item.mnemonicIndex=0;//			item.keyEquivalent='f';			iconMenu.addItem(item);			item=new NativeMenuItem('Preferences');			item.addEventListener(Event.SELECT,handlePreferences);			item.mnemonicIndex=0;//			item.keyEquivalent='k';			iconMenu.addItem(item);			item=new NativeMenuItem('Update');			item.addEventListener(Event.SELECT,handleUpdate);			item.mnemonicIndex=0;//			item.keyEquivalent='u';			iconMenu.addItem(item);			item=new NativeMenuItem('Exit');			item.addEventListener(Event.SELECT,handleExit);			item.mnemonicIndex=1;//			item.keyEquivalent='q';			iconMenu.addItem(item);			var sysTrayIcon=NativeApplication.nativeApplication.icon;			sysTrayIcon.menu = mcPixus.main.dragger.contextMenu = iconMenu;		}		function handleSyncMenu(event:Event):void {			syncMenu();		}		function handlePresets(event:Event):void {			var data:Object=(event.target as NativeMenuItem).data;			NativeApplication.nativeApplication.dispatchEvent(new customEvent(customEvent.SET_WINDOW_SIZE,data));			tracker.trackPageview('TrayMenu/Presets/Apply/'+data.width+'_'+data.height);		}		function handleSkins(event:Event):void {			var data:Object=(event.target as NativeMenuItem).data;			pixusShell.options.skin=int(data.@id);			NativeApplication.nativeApplication.dispatchEvent(new Event(pixusShell.EVENT_APPLY_SKIN));			tracker.trackPageview('TrayMenu/Skins/Apply/'+data.@title);		}		// Toggle Pixus		function handleIcon(event:Event):void {			tracker.trackPageview('TrayIcon/'+(windowPixus.visible?'Hide':'Show'));			togglePixusWindow();		}		// Show Pixus when invoking		// Strange in Windows, even running for the 1st time will dispatch INVOKE		// Stop from always showing Pixus when launching		function handleInvoke(event:Event):void {			if(firstTimeInvoke)				firstTimeInvoke=false;			else				if(isMacOS)					togglePixusWindow(); // Toggle visibility when clicking the dock icon under Mac OS X				else					togglePixusWindow(true); // Always show it when launching again under Windows		}		function handleFindBack(event:Event):void { // Invoked from sys tray / dock menu			tracker.trackPageview('TrayMenu/FindBack');			// Strange! handleFindBackEvent accepts an Event parameter but I have to trigger a customEvent or I will get a runtime error.			NativeApplication.nativeApplication.dispatchEvent(new customEvent(EVENT_FIND_BACK));		}		// pixusShell handle finding back of the preferences window		function handleFindBackEvent(event:Event):void { // Real find panels codes			togglePixusWindow(true);			togglePreferencesWindow(true);			toggleUpdateWindow(true);			// Find Preferences window			options.preferencesWindow.x=PREFERENCES_PANEL_X;			options.preferencesWindow.y=PREFERENCES_PANEL_Y;			Tweener.addTween(windowPreferences,{x:options.preferencesWindow.x,time:pixusShell.UI_TWEENING_TIME,transition:'easeOutCubic'});			Tweener.addTween(windowPreferences,{y:options.preferencesWindow.y,time:pixusShell.UI_TWEENING_TIME,transition:'easeOutCubic'});			// Find Update window			options.updateWindow.x=UPDATE_PANEL_X;			options.updateWindow.y=UPDATE_PANEL_Y;			Tweener.addTween(windowUpdate,{x:options.updateWindow.x,time:pixusShell.UI_TWEENING_TIME,transition:'easeOutCubic'});			Tweener.addTween(windowUpdate,{y:options.updateWindow.y,time:pixusShell.UI_TWEENING_TIME,transition:'easeOutCubic'});		}		function doResetPresets(event:Event):void {			pixusShell.options.presets=copyObjectDeep(pixusShell.PRESETS);			NativeApplication.nativeApplication.dispatchEvent(new Event(EVENT_PRESETS_CHANGE));		}		function handleExit(event:Event):void {			tracker.trackPageview( 'TrayMenu/Exit');			NativeApplication.nativeApplication.exit();		}		function handlePreferences(event:Event):void {			tracker.trackPageview( 'TrayMenu/Preferences');			togglePreferencesWindow(true);		}		function handleUpdate(event:Event):void {			tracker.trackPageview( 'TrayMenu/Update');			toggleUpdateWindow(true);		}		public function togglePixusWindow(v:Object=null):void{			if(v==null)				v=!pixusShell.options.pixusWindow.visible;			windowPixus.visible=pixusShell.options.pixusWindow.visible=v;			//trace('togglePixusWindow '+pixusShell.options.pixusWindow.visible);			if(v)				windowPixus.orderToFront();		}		public function togglePreferencesWindow(v:Object=null):void{			if(v==null)				v=!pixusShell.options.preferencesWindow.visible;			windowPreferences.visible=pixusShell.options.preferencesWindow.visible=v;			if(v)				windowPreferences.orderToFront();		}		public function toggleUpdateWindow(v:Object=null):void{			if(v==null)				v=!pixusShell.options.updateWindow.visible;			windowUpdate.visible=pixusShell.options.updateWindow.visible=v;			if(v)				windowUpdate.orderToFront();		}		public function getSkin(id:int=-1):XML {			if(id<0)				id=options.skin;			return skinpresets.skin[id];		}	}}