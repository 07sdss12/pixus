// update class// update NativeWindow// (cc)2007-2010 JPEG Interactive// By Jam Zhang// jammind@gmail.compackage {	import flash.display.NativeWindow;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.display.StageDisplayState;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.SecurityErrorEvent;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLStream;	import flash.net.SharedObject;	import flash.filesystem.File;	import flash.filesystem.FileMode;	import flash.filesystem.FileStream;	import flash.desktop.Updater;	import flash.desktop.NativeApplication;	import flash.utils.ByteArray;	import flash.utils.getTimer;	import flash.utils.setInterval;	import flash.utils.clearInterval;	import flash.system.System;	import codeplay.event.customEvent;	import com.google.analytics.GATracker;	public class update extends Sprite {		const PANEL_WIDTH:int=300;		const STATE_CHECKING:int=0;		const STATE_CONNECTION_FAILED:int=1;		const STATE_LATEST:int=2;		const STATE_OUTOFDATE:int=3;		const STATE_DOWNLOADING:int=4;		const STATE_DOWNLOADED:int=5;		const STATE_DOWNLOAD_FAILED:int=6;		private var urlStream:URLStream = new URLStream(); 		private var fileData:ByteArray = new ByteArray(); 		private var file:File;		private var downloadSince:int; // Time value for estimating time remaining		private var intervalId:int;		private var tracker:GATracker=pixusShell.tracker;				public var shell:pixusShell;				function update(pshell:pixusShell):void {			shell=pshell;			addEventListener(Event.ADDED_TO_STAGE, init);		}		function init(event:Event):void {			stage.scaleMode=StageScaleMode.NO_SCALE;			stage.align=StageAlign.TOP_LEFT;			removeEventListener(Event.ADDED_TO_STAGE, init);			addEventListener(Event.REMOVED_FROM_STAGE, dispose);			addEventListener(Event.ENTER_FRAME, init2);						handleUpdateStatusChange();						panels.infoRelease01.dispatchEvent(new customEvent(customEvent.RESIZE,{viewWidth:pixusShell.UPDATE_PANEL_WIDTH, viewHeight:pixusShell.UPDATE_PANEL_CONTENT_HEIGHT}));			panels.infoRelease02.dispatchEvent(new customEvent(customEvent.RESIZE,{viewWidth:pixusShell.UPDATE_PANEL_WIDTH, viewHeight:pixusShell.UPDATE_PANEL_CONTENT_HEIGHT}));						bClose.addEventListener(MouseEvent.CLICK, handleCloseButton);			bg.addEventListener(MouseEvent.MOUSE_DOWN,handleMove);			panels.bCheck01.addEventListener(MouseEvent.CLICK,handleButtons);			panels.bCheck02.addEventListener(MouseEvent.CLICK,handleButtons);			panels.bDownload01.addEventListener(MouseEvent.CLICK,handleButtons);			panels.bDownload02.addEventListener(MouseEvent.CLICK,handleButtons);			panels.bDownload03.addEventListener(MouseEvent.CLICK,handleButtons);			panels.bInstall.addEventListener(MouseEvent.CLICK,handleButtons);			panels.bCancel.addEventListener(MouseEvent.CLICK,handleButtons);			urlStream.addEventListener(IOErrorEvent.IO_ERROR,handleDownloadUpdateError);			urlStream.addEventListener(SecurityErrorEvent.SECURITY_ERROR,handleDownloadUpdateError);			urlStream.addEventListener(ProgressEvent.PROGRESS,updateProgress); 			NativeApplication.nativeApplication.addEventListener(pixusShell.UPDATE_STATUS_CHANGE, handleUpdateStatusChange);		}		function dispose(event:Event):void {			removeEventListener(Event.REMOVED_FROM_STAGE, init);			cancelUpdate();						bClose.removeEventListener(MouseEvent.CLICK, handleCloseButton);			bg.removeEventListener(MouseEvent.MOUSE_DOWN,handleMove);			panels.bCheck01.removeEventListener(MouseEvent.CLICK,handleButtons);			panels.bCheck02.removeEventListener(MouseEvent.CLICK,handleButtons);			panels.bDownload01.removeEventListener(MouseEvent.CLICK,handleButtons);			panels.bDownload02.removeEventListener(MouseEvent.CLICK,handleButtons);			panels.bDownload03.removeEventListener(MouseEvent.CLICK,handleButtons);			panels.bInstall.removeEventListener(MouseEvent.CLICK,handleButtons);			panels.bCancel.removeEventListener(MouseEvent.CLICK,handleButtons);			urlStream.removeEventListener(IOErrorEvent.IO_ERROR,handleDownloadUpdateError);			urlStream.removeEventListener(SecurityErrorEvent.SECURITY_ERROR,handleDownloadUpdateError);			urlStream.removeEventListener(ProgressEvent.PROGRESS,updateProgress); 			NativeApplication.nativeApplication.removeEventListener(pixusShell.UPDATE_STATUS_CHANGE, handleUpdateStatusChange);						System.gc();		}		// Things must be done 1-frame after init()		function init2(event:Event):void {			removeEventListener(Event.ENTER_FRAME,init2);			panels.infoRelease01.dispatchEvent(new customEvent(customEvent.RESIZE,{viewWidth:pixusShell.UPDATE_PANEL_WIDTH, viewHeight:pixusShell.UPDATE_PANEL_CONTENT_HEIGHT}));			panels.infoRelease02.dispatchEvent(new customEvent(customEvent.RESIZE,{viewWidth:pixusShell.UPDATE_PANEL_WIDTH, viewHeight:pixusShell.UPDATE_PANEL_CONTENT_HEIGHT}));		}				public function handleCloseButton(event:MouseEvent):void {			tracker.trackPageview( 'Update/Hide');			NativeApplication.nativeApplication.dispatchEvent(new Event(pixusShell.HIDE_UPDATE));		}		function handleButtons(event:MouseEvent):void {						switch (event.target) {								case panels.bCheck01 :				case panels.bCheck02 :					tracker.trackPageview( 'Update/Check');					shell.checkUpdate();					break;									case panels.bDownload01 :				case panels.bDownload02 :				case panels.bDownload03 ://					trace(updateInfo.source[0]);					tracker.trackPageview( 'Update/Download');					downloadUpdate(shell.updateInfo.source[0]);					break;									case panels.bInstall :					tracker.trackPageview( 'Update/Install');					var updater:Updater=new Updater();					updater.update(file,shell.updateInfo.latest.version.toString());					break;									case panels.bCancel :					tracker.trackPageview( 'Update/Cancel');					cancelUpdate();					break;								}					}		function handleUpdateStatusChange(event:Event=null):void {						switch (shell.updateStatus) {								case pixusShell.UPDATE_CHECKING:					panels.slideToPanel(STATE_CHECKING);					break;									case pixusShell.UPDATE_SUCCEEDED:					with (pixusShell) {						panels.infoRelease01.inner.tfInfo.text=panels.infoRelease02.inner.tfInfo.text=							options.version.version+'.'+options.version.release							+'\n'+shell.updateInfo.latest.version+'.'+shell.updateInfo.latest.release							+'\n'+shell.updateInfo.latest.date							+'\n'+shell.updateInfo.latest.size;						panels.infoRelease01.inner.tfNote.text=panels.infoRelease02.inner.tfNote.text=shell.updateInfo.latest.note;					}					compareVersions();					break;									case pixusShell.UPDATE_FAILED:					panels.slideToPanel(STATE_CONNECTION_FAILED);					break;								}		}				function compareVersions(){			if(int(pixusShell.options.version.release)<int(shell.updateInfo.latest.release)){								tracker.trackPageview( 'Update/Check/UpdateAvailable');				panels.slideToPanel(STATE_OUTOFDATE);				NativeApplication.nativeApplication.dispatchEvent(new Event(pixusShell.SHOW_UPDATE));							} else {								tracker.trackPageview( 'Update/Check/UpToDate');				panels.slideToPanel(STATE_LATEST);							}					}				function cancelUpdate():void {			trace('urlStream='+urlStream);			if(urlStream) {				urlStream.removeEventListener(Event.COMPLETE,updateLoaded); 				compareVersions();				try{					urlStream.close();				} catch(Error) {				}			}		}		function downloadUpdate(url:XML){			tracker.trackPageview( 'Update/Download/Began');			panels.slideToPanel(STATE_DOWNLOADING);			downloadSince=getTimer();			urlStream.addEventListener(Event.COMPLETE,updateLoaded); 			urlStream.load(new URLRequest(url.toString())); 		}		function handleDownloadUpdateError():void {			tracker.trackPageview( 'Update/Download/Failed');			panels.slideToPanel(STATE_DOWNLOAD_FAILED);			urlStream.removeEventListener(Event.COMPLETE,updateLoaded); 		}		function downloadingSpeed(bl:int):int{			return Math.round(bl/(getTimer()-downloadSince)*1000); // Bytes per Second		}		function updateProgress(event:ProgressEvent):void {			var bytesRemaining:int=event.bytesTotal-event.bytesLoaded;			panels.tfProgress01.text=Math.ceil(bytesRemaining*0.001)+' KB\n'+Math.round(bytesRemaining/downloadingSpeed(event.bytesLoaded))+' Seconds';			panels.progress01.setProgress(event.bytesLoaded/event.bytesTotal);			panels.progress02.setProgress(event.bytesLoaded/event.bytesTotal);		}  		function updateLoaded(event:Event):void { 			tracker.trackPageview( 'Update/Download/Downloaded');			panels.progress01.setProgress(1);			panels.progress02.setProgress(1);			urlStream.removeEventListener(Event.COMPLETE,updateLoaded); 		    urlStream.readBytes(fileData, 0, urlStream.bytesAvailable); 		    writeAirFile(); 			panels.slideToPanel(STATE_DOWNLOADED);		}  		function writeAirFile():void { 		    file = File.applicationStorageDirectory.resolvePath("pixus_update.air"); 		    var fileStream:FileStream = new FileStream(); 		    fileStream.open(file, FileMode.WRITE); 		    fileStream.writeBytes(fileData, 0, fileData.length); 		    fileStream.close(); 		    trace("The AIR file is written."); 		}		function handleMove(event:MouseEvent):void {			switch (event.type) {				case MouseEvent.MOUSE_DOWN :					stage.nativeWindow.startMove();					stage.addEventListener(MouseEvent.MOUSE_UP,handleMove);					break;				case MouseEvent.MOUSE_UP :					stage.removeEventListener(MouseEvent.MOUSE_UP,handleMove);					pixusShell.options.updateWindowPosition=new Object();					pixusShell.options.updateWindowPosition={x:stage.nativeWindow.x,y:stage.nativeWindow.y};					break;			}		}	}}