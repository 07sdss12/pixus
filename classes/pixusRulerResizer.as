// pixusRulerResizer class// (cc)2007-2009 JPEG Interactive// By Jam Zhang// jammind@gmail.compackage {	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.SimpleButton;	import flash.display.NativeWindow;	import flash.display.NativeWindowInitOptions;	import flash.display.NativeWindowResize;	import flash.events.NativeWindowBoundsEvent;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import flash.geom.Point;	import com.google.analytics.GATracker;	public class pixusRulerResizer extends Sprite {		private var _pixus:pixus=parent.parent as pixus; // _pixus will handle resizing and moving		private var dx, dy, w0, h0:int;		private var type:String='';		private var tracker:GATracker=pixusShell.tracker;		public function pixusRulerResizer():void {			hotspot.addEventListener(MouseEvent.MOUSE_DOWN, handleMouse);						var dimensions:Array=[0,0];			for (var n=0;n<name.length;n++){				switch(name.charAt(n).toUpperCase()){					// -1 to exclude the 1px board					case 'R':						dimensions[0]=1;						type='Right';						break;					case 'B':						dimensions[1]=1;						type='Bottom';						break;				}			}			if (dimensions[0]==dimensions[1]==1) {				type='Corner';			}		}		private function handleMouse(e:MouseEvent):void {			switch(e.type){								case MouseEvent.MOUSE_DOWN:					tracker.trackPageview( 'Pixus/Resize');					w0=_pixus.rulerWidth;					h0=_pixus.rulerHeight;					var p:Point=localToGlobal(new Point(0,0));					dx=p.x-e.stageX;					dy=p.y-e.stageY;					stage.addEventListener(MouseEvent.MOUSE_MOVE, handleMouse);					stage.addEventListener(MouseEvent.MOUSE_UP, handleMouse);					break;									case MouseEvent.MOUSE_UP:					stage.removeEventListener(MouseEvent.MOUSE_MOVE, handleMouse);					stage.removeEventListener(MouseEvent.MOUSE_UP, handleMouse);					break;									case MouseEvent.MOUSE_MOVE:					if(e.shiftKey) {						var point:Point;						switch(type){														case 'Corner':								// Hold shift to lock the aspec ratio								point=parent.globalToLocal(new Point(e.stageX+dx,e.stageY+dy));								var scale:Number=Math.min(point.x/w0,point.y/h0);								syncSize(new Point(int(w0*scale),int(h0*scale)));								break;															default:								// Snap to 10px grids								point=parent.globalToLocal(new Point(e.stageX+dx,e.stageY+dy));								syncSize(new Point(Math.round((point.x-1)/10)*10+1,Math.round((point.y-1)/10)*10+1));								break;														}					} else {						syncSize(parent.globalToLocal(new Point(e.stageX+dx,e.stageY+dy)));					}					break;			}		}		public function set offsetx(x0:int){			hotspot.x=x0;		}		public function set offsety(y0:int){			hotspot.y=y0;		}		public function syncSize(point:Point):void{			switch(type){				// -1 to exclude the 1px board				case 'Right':					_pixus.resizeTo(point.x-1,-1);					break;				case 'Bottom':					_pixus.resizeTo(-1,point.y-1);					break;				case 'Corner':					_pixus.resizeTo(point.x-1,point.y-1);					break;			}		}			}}