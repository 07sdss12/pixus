// scrollBar class// Version 0.9.0 2008-07-09// (cc)2007-2008 codeplay// By Jam Zhang// jam@01media.cn/*Referencepublic function scrollBar(options:Object=null):voidoptions.x:int=xoptions.x0:int=x					Minimal horizontal value.options.y:int=yoptions.y0:int=y					Minimal vertical value.options.barLength:int=50			Initial bar length.options.railLength:int=300			Initial rail length.options.minBarLength:int=20			Minimal length of the scrollBar.options.barThickness:int=5			Thickness of the bar.options.hotspotExpansion:int=10		If greater than 0, there will be a invisible hotspot wider than the visible bar for better grip.options.vertical:Boolean=true		Indicates if the scroll bar is vertical or horizontal.options.inertia:Boolean=false		Indicates whether scrolling have the inertia effect.options.align:String=ALIGN_INSIDE	Indicates how the bar will align with the initial position.	Generic	ALIGN_INSIDE	Equals to ALIGN_LEFT when vertical is true while ALIGN_ABOVE when horizontal.	ALIGN_OUTSIDE	Equals to ALIGN_RIGHT when vertical is true while ALIGN_BELOW when horizontal.		For Horizontal Bars	ALIGN_MIDDLE	The center of the bar is aligned to y0.	ALIGN_ABOVE		The bar is above y0.	ALIGN_BELOW		The bar is below y0.		For Vertical Bars	ALIGN_CENTER	The center of the bar is aligned to x0.	ALIGN_LEFT		The bar is left to x0.	ALIGN_RIGHT		The bar is right to x0.Always call setX() and setY() to move the bar or the bar will align incorrectly.*/package codeplay.ui{	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.Sprite;	import flash.geom.Rectangle;	import codeplay.display.codeplaySprite;	import codeplay.ui.aqua.scrollPanel;	import codeplay.event.customEvent;	import codeplay.physics.speed;	import codeplay.utils.codeplayShared;	import caurina.transitions.Tweener;	public class scrollBar extends codeplaySprite{		public static const DEFAULT_BAR_THICKNESS:int=5;		public static const ALIGN_LEFT:String='left';		public static const ALIGN_CENTER:String='center';		public static const ALIGN_RIGHT:String='right';		public static const ALIGN_ABOVE:String='above';		public static const ALIGN_MIDDLE:String='middle';		public static const ALIGN_BELOW:String='below';		public static const ALIGN_INSIDE:String='left';		public static const ALIGN_OUTSIDE:String='outside';		const DEFAULT_ALPHA:Number=.5;		const ROLLOVER_ALPHA:Number=.75;		public var vertical:Boolean=true;		public var minBarLength:int=20;		public var _railLength:int=300;		public var _barLength:int=50;		public var barThickness:int=DEFAULT_BAR_THICKNESS;		public var hotspotExpansion:int=10;		var inertia:Boolean=false;		var x0:int=x;		var y0:int=y;		var offsetX:int=0;		var offsetY:int=0;		var customUI:Boolean;		var align:String=ALIGN_INSIDE;		private var scrollSpeed:speed;		public var inertiaSpeed:Number;		public function scrollBar(options:Object=null):void{			customUI=(width>0&&height>0);			// Options			if(options!=null){				if(options.x!=undefined)					x0=options.x;				if(options.y!=undefined)					y0=options.y;				if(options.x0!=undefined)					x0=options.x0;				if(options.y0!=undefined)					y0=options.y0;				if(options.minBarLength!=undefined)					minBarLength=options.minBarLength;				if(options.railLength!=undefined)					_railLength=options.railLength;				if(options.barLength!=undefined)					_barLength=options.barLength;				if(options.barThickness!=undefined)					barThickness=options.barThickness;				if(options.hotspotExpansion!=undefined)					hotspotExpansion=options.hotspotExpansion;				if(options.vertical!=undefined)					vertical=options.vertical;				if(options.inertia!=undefined)					inertia=options.inertia;				if(options.align!=undefined)					align=options.align;			}			// Align Logic			if(vertical){				if(align==ALIGN_INSIDE)					align=ALIGN_LEFT;				else if(align==ALIGN_OUTSIDE)					align=ALIGN_RIGHT;			} else {				if(align==ALIGN_INSIDE)					align=ALIGN_ABOVE;				else if(align==ALIGN_OUTSIDE)					align=ALIGN_BELOW;			}			switch(align){				case ALIGN_LEFT:					offsetX=0;					break;				case ALIGN_CENTER:					offsetX=int(barThickness*.5);					break;				case ALIGN_RIGHT:					offsetX=barThickness;					break;				case ALIGN_ABOVE:					offsetY=0;					break;				case ALIGN_MIDDLE:					offsetY=int(barThickness*.5);					break;				case ALIGN_BELOW:					offsetY=barThickness;					break;			}			setX(x0);			setY(y0);			addEventListener(Event.ADDED_TO_STAGE,init);		}		function init(event:Event):void{			if(customUI){				// Scale the custom UI				if(vertical){					width=barThickness;					height=_barLength;				} else {					height=barThickness;					width=_barLength;				}			} else {				// Draw a rectangle if no custom UI				drawBar();			}			alpha=DEFAULT_ALPHA;			buttonMode=true;			addEventListener(MouseEvent.MOUSE_DOWN,handleMouse);			addEventListener(MouseEvent.MOUSE_OVER,handleMouse);			addEventListener(MouseEvent.MOUSE_OUT,handleMouse);			parent.addEventListener(customEvent.RESIZE,handleResize);		}		function drawBar():void{			graphics.clear();			graphics.beginFill(0xFFFFFF);			if(vertical)				graphics.drawRect(0,0,barThickness,_barLength);			else				graphics.drawRect(0,0,_barLength,barThickness);			if(hotspotExpansion>0){				graphics.beginFill(0xFFFFFF,0);				if(vertical)					graphics.drawRect(-hotspotExpansion,0,barThickness+hotspotExpansion*2,_barLength);				else					graphics.drawRect(0,-hotspotExpansion,_barLength,barThickness+hotspotExpansion*2);			}			graphics.endFill();		}		// Size and Position		function setX(x1:int):void{			x=x1+offsetX;		}		function setY(y1:int):void{			y=y1+offsetY;		}		function set railLength(l:int):void{			var p:Number=percentage;			_railLength=l;			scrollTo(p);		}		function get percentage():Number{			return (vertical?(y-y0):(x-x0))/(_railLength-_barLength);		}		function set percentage(p:Number):void{			p=Math.max(0,Math.min(1,p));			if(vertical)				y=y0+Math.round((_railLength-_barLength)*p);			else				x=x0+Math.round((_railLength-_barLength)*p);		}		function scrollTo(p:Number):void{			percentage=p;			dispatchEvent(new customEvent(customEvent.SCROLLING,{percentage:percentage,vertical:vertical}));		}		function set barLength(l:int):void{			_barLength=Math.max(minBarLength,l);			if(customUI){				if(vertical)					height=l;				else					width=l;			} else				drawBar();		}		// Physics		function stopInertia():void{			Tweener.removeTweens(this,inertiaSpeed);			finishScrolling();		}		// Event Handlers		function handleResize(event:customEvent):void{			switch(event.type){				case customEvent.SCROLLBAR_RESIZED:					railLength=event.data.railLength;					break;				case customEvent.RESIZE:					if(event.data!=null){						railLength=vertical?event.data.viewHeight:event.data.viewWidth;					}					break;			}		}		function handleMouse(e:MouseEvent):void{			switch(e.type){				case MouseEvent.MOUSE_OVER:					alpha=ROLLOVER_ALPHA;					break;				case MouseEvent.MOUSE_OUT:					alpha=DEFAULT_ALPHA;					break;				case MouseEvent.MOUSE_DOWN:					e.stopImmediatePropagation();					dispatchEvent(new customEvent(customEvent.SCROLLBAR_GRIPPED,{percentage:percentage,vertical:vertical}));					if(inertia){						Tweener.removeTweens(this,inertiaSpeed);						if(scrollSpeed!=null){							scrollSpeed.dispose();							scrollSpeed=null;						}						scrollSpeed=new speed(percentage,codeplayShared.UI_INERTIA_BUFFER);					}					stage.addEventListener(MouseEvent.MOUSE_UP,handleMouse);					stage.addEventListener(MouseEvent.MOUSE_MOVE,handleMouse);					removeEventListener(MouseEvent.MOUSE_OUT,handleMouse);					if(vertical)						codeplayStartDrag(false,new Rectangle(x,y0,0,_railLength-_barLength));					else						codeplayStartDrag(false,new Rectangle(x0,y,_railLength-_barLength,0));					break;				case MouseEvent.MOUSE_UP:					stage.removeEventListener(MouseEvent.MOUSE_UP,handleMouse);					stage.removeEventListener(MouseEvent.MOUSE_MOVE,handleMouse);//					scrollSpeed.value=percentage;					if(inertia&&scrollSpeed.currentSpeed!=0){						inertiaSpeed=scrollSpeed.currentSpeed;						Tweener.addTween(this,{							inertiaSpeed:0,							time:codeplayShared.UI_INERTIA_TIME,							onUpdate:function():void{scrollTo(percentage+inertiaSpeed)},							onComplete:finishScrolling						});					} else						finishScrolling();					break;				case MouseEvent.MOUSE_MOVE:					if(inertia)						scrollSpeed.value=percentage;					dispatchEvent(new customEvent(customEvent.SCROLLING,{percentage:percentage,vertical:vertical}));					break;			}		}		function finishScrolling():void{			if(scrollSpeed!=null){				scrollSpeed.dispose();				scrollSpeed=null;			}//			dispatchEvent(new customEvent(customEvent.SCROLLED,{percentage:percentage,vertical:vertical}));			addEventListener(MouseEvent.MOUSE_OUT,handleMouse);			alpha=ROLLOVER_ALPHA;		}	}}