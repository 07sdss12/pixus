// slicePlusSlice class// A Enhancement to 9-Slice// Controlling single slice of a slicePlus instance// (cc)2008-2010 codeplay// By Jam Zhang// jammind@gmail.compackage codeplay.display{	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.events.Event;	import flash.geom.Point;	import flash.geom.Rectangle;	import codeplay.display.slicePlus;	public class slicePlusSlice extends Sprite {		private var bdOriginal:BitmapData;		private var bmp:Bitmap; // The Bitmap Slice		private var xml:XML;		private var isFloating:Boolean=false;		private var p:slicePlus;		private var m:Sprite=new Sprite(); // The Mask		var minw:int=0; // Minimal Width of the Slice excluding the bleeding		var minh:int=0;		var w:int=0;		var h:int=0;		private var currentw:int=0; // Current Width of the Slice excluding the bleeding		private var currenth:int=0;		private var offsetx:int=0;		private var offsety:int=0;		public function slicePlusSlice(bd:BitmapData, data:XML, sp:slicePlus):void {			bdOriginal=bd;			p=sp;			xml=data;			var float:String=String(xml.@float).toLowerCase();			isFloating=(float=='true'||float=='yes'||float=='1');			offsetx=int(xml.@offsetx);			offsety=int(xml.@offsety);			w=int(xml.@w);			h=int(xml.@h);			minw=int(xml.@minw);			minh=int(xml.@minh);			var newBitmapData:BitmapData=new BitmapData(w,h);			newBitmapData.copyPixels(bd,new Rectangle(xml.@x,xml.@y,w,h),new Point(0,0));			bmp=new Bitmap(newBitmapData);			addChild(bmp);			addEventListener(Event.ADDED_TO_STAGE,init);		}		function init(event:Event) {			x=xml.@x;			y=xml.@y;			var s:String=String(xml.@position).toLowerCase();			switch (s) {				case 'tl' :// Top Left				case 'lt' :					x=offsetx;					y=offsety;					parent.addEventListener(Event.RESIZE,syncTopLeft);					if(!isFloating) {						p.TL=this;						addMask();						if (minw==0) {							minw=w+offsetx;						}						if (minh==0) {							minh=h+offsety;						}						p.minWidthTop+=minw;						p.minHeightLeft+=minh;					}					break;									case 'tc' :// Top Center				case 'ct' :					x=p.sliceWidth+offsetx;					y=offsety;					parent.addEventListener(Event.RESIZE,syncTopCenter,false,-10);					if(!isFloating) {						p.TC=this;						minw=0;						if (minh==0) {							minh=h+offsety;						}					}					break;									case 'tr' :// Top Right				case 'rt' :					x=p.sliceWidth+offsetx;					y=offsety;					parent.addEventListener(Event.RESIZE,syncTopRight,false,-5);					if(!isFloating) {						p.TR=this;						addMask();						if (minw==0) {							minw=Math.max(0,-offsetx);;						}						if (minh==0) {							minh=h+offsety;						}						currentw=-offsetx;						p.minWidthTop+=minw;						p.minHeightRight+=minh;					}					break;									case 'bl' :// Bottom Left				case 'lb' :					x=offsetx;					y=p.sliceHeight+offsety;					parent.addEventListener(Event.RESIZE,syncBottomLeft);					if(!isFloating) {						p.BL=this;						addMask();						if (minw==0) {							minw=w+offsetx;						}						if (minh==0) {							minh=Math.max(0,-offsety);						}						p.minWidthBottom+=minw;						p.minHeightLeft+=minh;					}					break;									case 'bc' :// Bottom Center				case 'cb' :					y=p.sliceHeight+offsety;					parent.addEventListener(Event.RESIZE,syncBottomCenter,false,-10);					if(!isFloating) {						p.BC=this;						minw=0;					}					break;									case 'br' :// Bottom Right				case 'rb' :					x=p.sliceWidth+offsetx;					y=p.sliceHeight+offsety;					parent.addEventListener(Event.RESIZE,syncBottomRight);					if(!isFloating) {						p.BR=this;						addMask();						if (minw==0) {							minw=Math.max(0,-offsetx);						}						if (minh==0) {							minh=Math.max(0,-offsety);						}						currentw=-offsetx;						p.minWidthBottom+=minw;						p.minHeightRight+=minh;					}					break;									case 'l' :// Middle Left				case 'ml' :					x=offsetx;					parent.addEventListener(Event.RESIZE,syncMiddleLeft,false,-10);					if(!isFloating) {						p.L=this;						minh=0;//						syncMiddleLeft();					}					break;									case 'r' :// Middle Right				case 'mr' :					x=p.sliceWidth+offsetx;					parent.addEventListener(Event.RESIZE,syncMiddleRight,false,-10);					if(!isFloating) {						p.R=this;						minh=0;//						syncMiddleRight();					}					break;								}		}		function addMask():void {			m.graphics.beginFill(0xFFFFFF);			m.graphics.drawRect(0,0,w,h);			m.graphics.endFill();			addChild(m);			bmp.mask=m;		}		function syncTopLeft(event:Event=null) {			if(!isFloating) {				m.width=Math.min(Math.max(minw,p.sliceWidth-p.TR.currentw)-offsetx,w);				m.height=Math.min(Math.max(minh,p.sliceHeight-p.TR.currenth)-offsety,h);				currentw=m.width+offsetx;				currenth=m.height+offsety;			}		}		function syncTopCenter(event:Event=null) {			if(isFloating) {				x=int(p.sliceWidth*.5)+offsetx;			} else {				if (p.TR.x-p.TL.currentw>0) {					x=p.TL.currentw;					width=p.TR.x-p.TL.currentw;					visible=true;				} else {					visible=false;				}			}		}		function syncTopRight(event:Event=null) {			x=p.sliceWidth+offsetx;			if(!isFloating) {				if (p.sliceWidth+offsetx<p.TL.currentw && minw<w) {// Horizontally Cropped					m.x=p.TL.currentw-(p.sliceWidth+offsetx);					currentw=m.x;				} else { // Full Width					m.x=0;					currentw=w;				}				m.height=Math.min(Math.max(minh,p.sliceHeight-p.TR.currenth)-offsety,h);				currenth=m.height+offsety;			}		}		function syncMiddleLeft(event:Event=null) {			if(isFloating) {				y=int(p.sliceHeight*.5)+offsety;			} else {				if (p.BL.y-p.TL.currenth>0) {					y=p.TL.currenth;					height=p.BL.y-p.TL.currenth;					visible=true;				} else {					visible=false;				}			}		}		function syncMiddleRight(event:Event=null) {			x=p.sliceWidth+offsetx;			if(isFloating) {				y=int(p.sliceHeight*.5)+offsety;			} else {				if (p.BR.y-p.TR.currenth>0) {					y=p.TR.currenth;					height=p.BR.y-p.TR.currenth;					visible=true;				} else {					visible=false;				}			}		}		function syncBottomLeft(event:Event=null) {			y=p.sliceHeight+offsety;			if(!isFloating) {				m.width=Math.min(Math.max(minw,p.sliceWidth-p.BR.currentw)-offsetx,w);				currentw=m.width+offsetx;			}		}		function syncBottomCenter(event:Event=null) {			if(isFloating) {				x=int(p.sliceWidth*.5)+offsetx;				y=p.sliceHeight+offsety;			} else {				if (p.BR.x-p.BL.currentw>0) {					x=p.BL.currentw;					y=p.sliceHeight+offsety;					width=p.BR.x-p.BL.currentw;					visible=true;				} else {					visible=false;				}			}		}		function syncBottomRight(event:Event=null) {			x=p.sliceWidth+offsetx;			y=p.sliceHeight+offsety;			if(!isFloating) {				if (p.sliceWidth+offsetx<p.BL.currentw) {// Horizontally Cropped					m.x=p.BL.currentw-(p.sliceWidth+offsetx);					currentw=-offsetx-m.x;				} else { // Full Width					m.x=0;					currentw=offsetx;				}				currenth=m.height+offsety;			}		}	}}